import {
  readBinaryFile,
  writeFile,
  readDir,
  createDir,
  renameFile,
  removeFile,
  removeDir,
  exists as tauriExists,
  type FileEntry,
} from "@tauri-apps/plugin-fs";
import { metadata } from "@tauri-apps/api/fs";
import { DirectoryEntry, FileStats } from "./IFileSystem";

export class TauriFileSystem implements IFileSystem {
  async readFile(path: string): Promise<Uint8Array> {
    return await readBinaryFile(path);
  }

  async writeFile(path: string, content: Uint8Array | string): Promise<void> {
    const options =
      content instanceof Uint8Array
        ? { contents: content }
        : { contents: content };
    await writeFile({ path, ...options });
  }

  async readDir(dirPath: string): Promise<DirectoryEntry[]> {
    const entries = await readDir(dirPath);
    return entries.map((entry) => ({
      name: entry.name || "",
      isFile: entry.children === undefined,
      isDirectory: entry.children !== undefined,
    }));
  }

  async mkdir(dirPath: string, recursive = false): Promise<void> {
    await createDir(dirPath, { recursive });
  }

  async stat(filePath: string): Promise<FileStats> {
    const md = await metadata(filePath);
    return {
      isFile: md.isFile,
      isDirectory: md.isDir,
      size: md.size || 0,
      modified: new Date(md.modifiedAt || 0),
    };
  }

  async rename(oldPath: string, newPath: string): Promise<void> {
    await renameFile(oldPath, newPath);
  }

  async deleteFile(filePath: string): Promise<void> {
    await removeFile(filePath);
  }

  async deleteDirectory(dirPath: string): Promise<void> {
    await removeDir(dirPath, { recursive: true });
  }

  async exists(path: string): Promise<boolean> {
    return await tauriExists(path);
  }
}
