name: "Nightly Build"

on:
  schedule:
    - cron: "0 0 * * *" # 每天凌晨 0 点执行
  workflow_dispatch: # 手动触发

jobs:
  delete-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - run: gh release delete nightly --yes --cleanup-tag || true # 忽略错误
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  create-release:
    needs: delete-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - run: gh release create nightly --title "Nightly Build" --prerelease
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-tauri:
    needs: create-release
    outputs:
      hash: ${{ steps.sha256sum.outputs.hash }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libudev-dev

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: edit version (linux only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"0.0.0-nightly.r${{ github.run_number }}\"/" src-tauri/tauri.conf.json

      - name: edit version (macos only)
        if: matrix.platform == 'macos-latest' # This must match the platform value defined above.
        run: |
          sed -i '' "s/\"version\": \"[^\"]*\"/\"version\": \"0.0.0-nightly.r${{ github.run_number }}\"/" src-tauri/tauri.conf.json

      - name: edit version (windows only)
        if: matrix.platform == 'windows-latest' # This must match the platform value defined above.
        run: |
          $jsonContent = Get-Content -Path "src-tauri/tauri.conf.json" -Raw
          $jsonObject = $jsonContent | ConvertFrom-Json
          $jsonObject.version = "0.0.0-nightly.r${{ github.run_number }}"
          $jsonObject | ConvertTo-Json -Depth 10 | Set-Content -Path "src-tauri/tauri.conf.json"

      - uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LR_GITHUB_CLIENT_SECRET: ${{ secrets.ENV_GITHUB_CLIENT_SECRET }}
          LR_API_BASE_URL: ${{ secrets.ENV_API_BASE_URL }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          # upload to release
          tagName: "nightly"
          args: ${{ matrix.args }}

      - id: sha256sum
        name: calculate sha256sum (linux only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          cd src-tauri/target/release/bundle/deb
          sha256sum "Project Graph_0.0.0-nightly.r${{ github.run_number }}_amd64.deb" | awk '{print $1}' > sha256sum.txt
          echo "hash=$(cat sha256sum.txt)" >> "$GITHUB_OUTPUT"

  publish-tauri-android:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install NDK
        run: sdkmanager "ndk;27.0.11902837"

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: "armv7-linux-androideabi,i686-linux-android,x86_64-linux-android,aarch64-linux-android"

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Edit version
        run: |
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"0.0.${{ github.run_number }}\"/" src-tauri/tauri.conf.json

      - name: setup sign
        run: |
          cd src-tauri/gen/android
          # create keystore.properties
          cat > keystore.properties <<EOF
          password=${{ secrets.ANDROID_RELEASE_PASSWORD }}
          keyAlias=upload
          storeFile=upload.jks
          EOF
          # create upload.jks
          echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" | base64 --decode > app/upload.jks

      - name: build
        run: pnpm tauri android build -v
        env:
          NDK_HOME: ${{ env.ANDROID_HOME }}/ndk/27.0.11902837
          LR_GITHUB_CLIENT_SECRET: ${{ secrets.ENV_GITHUB_CLIENT_SECRET }}
          LR_API_BASE_URL: ${{ secrets.ENV_API_BASE_URL }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: rename apk file
        run: |
          cd src-tauri/gen/android/app/build/outputs/apk/universal/release
          mv app-universal-release.apk Project.Graph_0.0.0-nightly.r${{ github.run_number }}_universal-signed.apk

      - name: upload
        run: gh release upload nightly src-tauri/gen/android/app/build/outputs/apk/universal/release/Project.Graph_0.0.0-nightly.r${{ github.run_number }}_universal-signed.apk --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  bump-aur-version:
    needs: publish-tauri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup AUR private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -t ed25519 aur.archlinux.org >> ~/.ssh/known_hosts
      - name: Clone AUR repository
        run: git clone ssh://aur@aur.archlinux.org/project-graph-nightly-bin.git
      - name: Update version in PKGBUILD and .SRCINFO
        run: |
          cd project-graph-nightly-bin
          sed -i "s/pkgver=.*$/pkgver=r${{ github.run_number }}/" PKGBUILD
          sed -i "s/pkgver = .*$/pkgver = r${{ github.run_number }}/" .SRCINFO
          sed -i "s/Project\.Graph_0\.0\.0-nightly\..*_amd64\.deb/Project.Graph_0.0.0-nightly.r${{ github.run_number }}_amd64.deb/" PKGBUILD .SRCINFO
          sed -i "s/^sha256sums_x86_64=('.*')$/sha256sums_x86_64=('${{ needs.publish-tauri.outputs.hash }}')/" PKGBUILD
          sed -i "s/sha256sums_x86_64 = .*$/sha256sums_x86_64 = ${{ needs.publish-tauri.outputs.hash }}/" .SRCINFO
      - name: Commit and push changes
        run: |
          cd project-graph-nightly-bin
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "Bump version to r${{ github.run_number }}"
          git push origin master
